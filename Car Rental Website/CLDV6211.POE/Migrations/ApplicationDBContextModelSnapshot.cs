// <auto-generated />
using System;
using CLDV6211.POE.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CLDV6211.POE.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CLDV6211.POE.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CLDV6211.POE.Models.Car", b =>
                {
                    b.Property<string>("CarNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Available")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarBodyType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarMake")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KMTravelled")
                        .HasColumnType("int");

                    b.Property<int>("ServiceKM")
                        .HasColumnType("int");

                    b.Property<string>("TypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarNo");

                    b.HasIndex("CarBodyType");

                    b.HasIndex("CarMake");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.CarBodyType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("CarBodyTypes");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.CarMake", b =>
                {
                    b.Property<string>("CrMake")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MakeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CrMake");

                    b.ToTable("CarMakes");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.Driver", b =>
                {
                    b.Property<string>("DriverNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DrAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverNo");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.Inspector", b =>
                {
                    b.Property<string>("InspectorNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InspectorNo");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.Rental", b =>
                {
                    b.Property<int>("RentalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalCode"), 1L, 1);

                    b.Property<string>("CarNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarNo1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverNo1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectorNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InspectorNo1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("RentalFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("RentalCode");

                    b.HasIndex("CarNo");

                    b.HasIndex("CarNo1");

                    b.HasIndex("DriverNo");

                    b.HasIndex("DriverNo1");

                    b.HasIndex("InspectorNo");

                    b.HasIndex("InspectorNo1");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.ReturnCar", b =>
                {
                    b.Property<int>("ReturnCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnCode"), 1L, 1);

                    b.Property<string>("CarNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarNo1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DriverNo1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ElapsedDate")
                        .HasColumnType("int");

                    b.Property<decimal>("Fine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InspectorNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InspectorNo1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReturnCode");

                    b.HasIndex("CarNo");

                    b.HasIndex("CarNo1");

                    b.HasIndex("DriverNo");

                    b.HasIndex("DriverNo1");

                    b.HasIndex("InspectorNo");

                    b.HasIndex("InspectorNo1");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CLDV6211.POE.Models.Car", b =>
                {
                    b.HasOne("CLDV6211.POE.Models.CarBodyType", "TypeIDs")
                        .WithMany()
                        .HasForeignKey("CarBodyType");

                    b.HasOne("CLDV6211.POE.Models.CarMake", "CarMakes")
                        .WithMany()
                        .HasForeignKey("CarMake")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarMakes");

                    b.Navigation("TypeIDs");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.Rental", b =>
                {
                    b.HasOne("CLDV6211.POE.Models.Car", "Cars")
                        .WithMany()
                        .HasForeignKey("CarNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLDV6211.POE.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarNo1");

                    b.HasOne("CLDV6211.POE.Models.Driver", "Drivers")
                        .WithMany()
                        .HasForeignKey("DriverNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLDV6211.POE.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverNo1");

                    b.HasOne("CLDV6211.POE.Models.Inspector", "Inspectors")
                        .WithMany()
                        .HasForeignKey("InspectorNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLDV6211.POE.Models.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorNo1");

                    b.Navigation("Car");

                    b.Navigation("Cars");

                    b.Navigation("Driver");

                    b.Navigation("Drivers");

                    b.Navigation("Inspector");

                    b.Navigation("Inspectors");
                });

            modelBuilder.Entity("CLDV6211.POE.Models.ReturnCar", b =>
                {
                    b.HasOne("CLDV6211.POE.Models.Car", "Cars")
                        .WithMany()
                        .HasForeignKey("CarNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLDV6211.POE.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarNo1");

                    b.HasOne("CLDV6211.POE.Models.Driver", "Drivers")
                        .WithMany()
                        .HasForeignKey("DriverNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLDV6211.POE.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverNo1");

                    b.HasOne("CLDV6211.POE.Models.Inspector", "Inspectors")
                        .WithMany()
                        .HasForeignKey("InspectorNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLDV6211.POE.Models.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorNo1");

                    b.Navigation("Car");

                    b.Navigation("Cars");

                    b.Navigation("Driver");

                    b.Navigation("Drivers");

                    b.Navigation("Inspector");

                    b.Navigation("Inspectors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CLDV6211.POE.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CLDV6211.POE.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLDV6211.POE.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CLDV6211.POE.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
